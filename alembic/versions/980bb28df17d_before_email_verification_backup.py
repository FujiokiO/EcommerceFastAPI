"""before email verification backup

Revision ID: 980bb28df17d
Revises: 
Create Date: 2023-12-22 20:44:16.839317

"""
#Alembic 提供了一种规范的、可追踪的数据库变更管理机制
#模型变更脚本生成： 当你修改 SQLAlchemy 模型时，Alembic 可以自动生成与模型变更相对应的数据库迁移脚本。
#这样的脚本描述了如何将数据库从一个版本迁移到另一个版本，包括新增表、修改字段类型等操作。
#数据库迁移执行：使用 Alembic 的命令行工具，你可以轻松地将生成的数据库迁移脚本应用到实际的数据库，实现数据库结构的变更。

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

from app.services.auth_service import get_password_hash

# revision identifiers, used by Alembic.
revision: str = '980bb28df17d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('username', sa.String(length=50), nullable=False),
                    sa.Column('email', sa.String(length=100), nullable=False),
                    sa.Column('password', sa.String(length=100), nullable=False),
                    sa.Column('is_admin', sa.Boolean(), nullable=True),
                    sa.Column('is_disabled', sa.Boolean(), nullable=True),
                    sa.Column('registration_time', sa.DateTime(), nullable=True),
                    sa.Column('last_login_time', sa.DateTime(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('username')
                    )
    op.create_table('verification_codes',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('email', sa.String(length=100), nullable=False),
                    sa.Column('code', sa.String(length=10), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('expiration_time', sa.DateTime(), nullable=False),
                    sa.Column('is_used', sa.Boolean(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email')
                    )
    op.create_index(op.f('ix_verification_codes_id'), 'verification_codes', ['id'], unique=False)
    op.create_table('addresses',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('country', sa.String(length=100), nullable=True),
                    sa.Column('province_or_state', sa.String(length=100), nullable=True),
                    sa.Column('city', sa.String(length=100), nullable=True),
                    sa.Column('street', sa.String(length=255), nullable=True),
                    sa.Column('postal_code', sa.String(length=20), nullable=True),
                    sa.Column('is_default', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    admin_password_hash = get_password_hash("Pa$sW0rd")
    op.execute(
        f"""
        INSERT INTO users (username, email, password, is_admin, is_disabled, registration_time)
        VALUES ('admin', 'admin@dbcd.oky.wiki', '{admin_password_hash}', true, false, now())
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('addresses')
    op.drop_index(op.f('ix_verification_codes_id'), table_name='verification_codes')
    op.drop_table('verification_codes')
    op.drop_table('users')
    # ### end Alembic commands ###
